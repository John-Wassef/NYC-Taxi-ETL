// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tlc_trip_record_data_task.etl_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ETL Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class ETL implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ETL";
	private final String projectName = "TLC_TRIP_RECORD_DATA_TASK";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ETL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ETL.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		static byte[] commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer VendorID;

		public Integer getVendorID() {
			return this.VendorID;
		}

		public java.util.Date tpep_pickup_datetime;

		public java.util.Date getTpep_pickup_datetime() {
			return this.tpep_pickup_datetime;
		}

		public java.util.Date tpep_dropoff_datetime;

		public java.util.Date getTpep_dropoff_datetime() {
			return this.tpep_dropoff_datetime;
		}

		public Integer passenger_count;

		public Integer getPassenger_count() {
			return this.passenger_count;
		}

		public Float trip_distance;

		public Float getTrip_distance() {
			return this.trip_distance;
		}

		public String RateCodeType;

		public String getRateCodeType() {
			return this.RateCodeType;
		}

		public Integer store_and_fwd_flag;

		public Integer getStore_and_fwd_flag() {
			return this.store_and_fwd_flag;
		}

		public Integer PULocatioID;

		public Integer getPULocatioID() {
			return this.PULocatioID;
		}

		public Integer DOLocationID;

		public Integer getDOLocationID() {
			return this.DOLocationID;
		}

		public String payment_type;

		public String getPayment_type() {
			return this.payment_type;
		}

		public Float fare_amount;

		public Float getFare_amount() {
			return this.fare_amount;
		}

		public Float extra;

		public Float getExtra() {
			return this.extra;
		}

		public Float mta_tax;

		public Float getMta_tax() {
			return this.mta_tax;
		}

		public Float tip_amount;

		public Float getTip_amount() {
			return this.tip_amount;
		}

		public Float tolls_amount;

		public Float getTolls_amount() {
			return this.tolls_amount;
		}

		public Float improvement_surcharge;

		public Float getImprovement_surcharge() {
			return this.improvement_surcharge;
		}

		public Float total_amount;

		public Float getTotal_amount() {
			return this.total_amount;
		}

		public Float congestion_surcharge;

		public Float getCongestion_surcharge() {
			return this.congestion_surcharge;
		}

		public Float Airport_fee;

		public Float getAirport_fee() {
			return this.Airport_fee;
		}

		public Integer trip_duration_in_minutes;

		public Integer getTrip_duration_in_minutes() {
			return this.trip_duration_in_minutes;
		}

		public Float average_speed_mph;

		public Float getAverage_speed_mph() {
			return this.average_speed_mph;
		}

		public String PUZone;

		public String getPUZone() {
			return this.PUZone;
		}

		public String PUBorough;

		public String getPUBorough() {
			return this.PUBorough;
		}

		public String DOZone;

		public String getDOZone() {
			return this.DOZone;
		}

		public String DOBorough;

		public String getDOBorough() {
			return this.DOBorough;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.VendorID == null) ? 0 : this.VendorID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.VendorID == null) {
				if (other.VendorID != null)
					return false;

			} else if (!this.VendorID.equals(other.VendorID))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.VendorID = this.VendorID;
			other.tpep_pickup_datetime = this.tpep_pickup_datetime;
			other.tpep_dropoff_datetime = this.tpep_dropoff_datetime;
			other.passenger_count = this.passenger_count;
			other.trip_distance = this.trip_distance;
			other.RateCodeType = this.RateCodeType;
			other.store_and_fwd_flag = this.store_and_fwd_flag;
			other.PULocatioID = this.PULocatioID;
			other.DOLocationID = this.DOLocationID;
			other.payment_type = this.payment_type;
			other.fare_amount = this.fare_amount;
			other.extra = this.extra;
			other.mta_tax = this.mta_tax;
			other.tip_amount = this.tip_amount;
			other.tolls_amount = this.tolls_amount;
			other.improvement_surcharge = this.improvement_surcharge;
			other.total_amount = this.total_amount;
			other.congestion_surcharge = this.congestion_surcharge;
			other.Airport_fee = this.Airport_fee;
			other.trip_duration_in_minutes = this.trip_duration_in_minutes;
			other.average_speed_mph = this.average_speed_mph;
			other.PUZone = this.PUZone;
			other.PUBorough = this.PUBorough;
			other.DOZone = this.DOZone;
			other.DOBorough = this.DOBorough;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.VendorID = this.VendorID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL.length) {
					if (length < 1024 && commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL.length == 0) {
						commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[1024];
					} else {
						commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL, 0, length);
				strReturn = new String(commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL) {

				try {

					int length = 0;

					this.VendorID = readInteger(dis);

					this.tpep_pickup_datetime = readDate(dis);

					this.tpep_dropoff_datetime = readDate(dis);

					this.passenger_count = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.trip_distance = null;
					} else {
						this.trip_distance = dis.readFloat();
					}

					this.RateCodeType = readString(dis);

					this.store_and_fwd_flag = readInteger(dis);

					this.PULocatioID = readInteger(dis);

					this.DOLocationID = readInteger(dis);

					this.payment_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.fare_amount = null;
					} else {
						this.fare_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extra = null;
					} else {
						this.extra = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mta_tax = null;
					} else {
						this.mta_tax = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tip_amount = null;
					} else {
						this.tip_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tolls_amount = null;
					} else {
						this.tolls_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.improvement_surcharge = null;
					} else {
						this.improvement_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_amount = null;
					} else {
						this.total_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.congestion_surcharge = null;
					} else {
						this.congestion_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Airport_fee = null;
					} else {
						this.Airport_fee = dis.readFloat();
					}

					this.trip_duration_in_minutes = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average_speed_mph = null;
					} else {
						this.average_speed_mph = dis.readFloat();
					}

					this.PUZone = readString(dis);

					this.PUBorough = readString(dis);

					this.DOZone = readString(dis);

					this.DOBorough = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.VendorID, dos);

				// java.util.Date

				writeDate(this.tpep_pickup_datetime, dos);

				// java.util.Date

				writeDate(this.tpep_dropoff_datetime, dos);

				// Integer

				writeInteger(this.passenger_count, dos);

				// Float

				if (this.trip_distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.trip_distance);
				}

				// String

				writeString(this.RateCodeType, dos);

				// Integer

				writeInteger(this.store_and_fwd_flag, dos);

				// Integer

				writeInteger(this.PULocatioID, dos);

				// Integer

				writeInteger(this.DOLocationID, dos);

				// String

				writeString(this.payment_type, dos);

				// Float

				if (this.fare_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.fare_amount);
				}

				// Float

				if (this.extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extra);
				}

				// Float

				if (this.mta_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mta_tax);
				}

				// Float

				if (this.tip_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tip_amount);
				}

				// Float

				if (this.tolls_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tolls_amount);
				}

				// Float

				if (this.improvement_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.improvement_surcharge);
				}

				// Float

				if (this.total_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_amount);
				}

				// Float

				if (this.congestion_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.congestion_surcharge);
				}

				// Float

				if (this.Airport_fee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Airport_fee);
				}

				// Integer

				writeInteger(this.trip_duration_in_minutes, dos);

				// Float

				if (this.average_speed_mph == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.average_speed_mph);
				}

				// String

				writeString(this.PUZone, dos);

				// String

				writeString(this.PUBorough, dos);

				// String

				writeString(this.DOZone, dos);

				// String

				writeString(this.DOBorough, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VendorID=" + String.valueOf(VendorID));
			sb.append(",tpep_pickup_datetime=" + String.valueOf(tpep_pickup_datetime));
			sb.append(",tpep_dropoff_datetime=" + String.valueOf(tpep_dropoff_datetime));
			sb.append(",passenger_count=" + String.valueOf(passenger_count));
			sb.append(",trip_distance=" + String.valueOf(trip_distance));
			sb.append(",RateCodeType=" + RateCodeType);
			sb.append(",store_and_fwd_flag=" + String.valueOf(store_and_fwd_flag));
			sb.append(",PULocatioID=" + String.valueOf(PULocatioID));
			sb.append(",DOLocationID=" + String.valueOf(DOLocationID));
			sb.append(",payment_type=" + payment_type);
			sb.append(",fare_amount=" + String.valueOf(fare_amount));
			sb.append(",extra=" + String.valueOf(extra));
			sb.append(",mta_tax=" + String.valueOf(mta_tax));
			sb.append(",tip_amount=" + String.valueOf(tip_amount));
			sb.append(",tolls_amount=" + String.valueOf(tolls_amount));
			sb.append(",improvement_surcharge=" + String.valueOf(improvement_surcharge));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append(",congestion_surcharge=" + String.valueOf(congestion_surcharge));
			sb.append(",Airport_fee=" + String.valueOf(Airport_fee));
			sb.append(",trip_duration_in_minutes=" + String.valueOf(trip_duration_in_minutes));
			sb.append(",average_speed_mph=" + String.valueOf(average_speed_mph));
			sb.append(",PUZone=" + PUZone);
			sb.append(",PUBorough=" + PUBorough);
			sb.append(",DOZone=" + DOZone);
			sb.append(",DOBorough=" + DOBorough);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VendorID, other.VendorID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		static byte[] commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];

		public Integer VendorID;

		public Integer getVendorID() {
			return this.VendorID;
		}

		public java.util.Date tpep_pickup_datetime;

		public java.util.Date getTpep_pickup_datetime() {
			return this.tpep_pickup_datetime;
		}

		public java.util.Date tpep_dropoff_datetime;

		public java.util.Date getTpep_dropoff_datetime() {
			return this.tpep_dropoff_datetime;
		}

		public Float passenger_count;

		public Float getPassenger_count() {
			return this.passenger_count;
		}

		public Float trip_distance;

		public Float getTrip_distance() {
			return this.trip_distance;
		}

		public Float RatecodeID;

		public Float getRatecodeID() {
			return this.RatecodeID;
		}

		public Character store_and_fwd_flag;

		public Character getStore_and_fwd_flag() {
			return this.store_and_fwd_flag;
		}

		public Integer PULocationID;

		public Integer getPULocationID() {
			return this.PULocationID;
		}

		public Integer DOLocationID;

		public Integer getDOLocationID() {
			return this.DOLocationID;
		}

		public Integer payment_type;

		public Integer getPayment_type() {
			return this.payment_type;
		}

		public Float fare_amount;

		public Float getFare_amount() {
			return this.fare_amount;
		}

		public Float extra;

		public Float getExtra() {
			return this.extra;
		}

		public Float mta_tax;

		public Float getMta_tax() {
			return this.mta_tax;
		}

		public Float tip_amount;

		public Float getTip_amount() {
			return this.tip_amount;
		}

		public Float tolls_amount;

		public Float getTolls_amount() {
			return this.tolls_amount;
		}

		public Float improvement_surcharge;

		public Float getImprovement_surcharge() {
			return this.improvement_surcharge;
		}

		public Float total_amount;

		public Float getTotal_amount() {
			return this.total_amount;
		}

		public Float congestion_surcharge;

		public Float getCongestion_surcharge() {
			return this.congestion_surcharge;
		}

		public Float Airport_fee;

		public Float getAirport_fee() {
			return this.Airport_fee;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL) {

				try {

					int length = 0;

					this.VendorID = readInteger(dis);

					this.tpep_pickup_datetime = readDate(dis);

					this.tpep_dropoff_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.passenger_count = null;
					} else {
						this.passenger_count = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.trip_distance = null;
					} else {
						this.trip_distance = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RatecodeID = null;
					} else {
						this.RatecodeID = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.store_and_fwd_flag = null;
					} else {
						this.store_and_fwd_flag = dis.readChar();
					}

					this.PULocationID = readInteger(dis);

					this.DOLocationID = readInteger(dis);

					this.payment_type = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.fare_amount = null;
					} else {
						this.fare_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extra = null;
					} else {
						this.extra = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mta_tax = null;
					} else {
						this.mta_tax = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tip_amount = null;
					} else {
						this.tip_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tolls_amount = null;
					} else {
						this.tolls_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.improvement_surcharge = null;
					} else {
						this.improvement_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_amount = null;
					} else {
						this.total_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.congestion_surcharge = null;
					} else {
						this.congestion_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Airport_fee = null;
					} else {
						this.Airport_fee = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.VendorID, dos);

				// java.util.Date

				writeDate(this.tpep_pickup_datetime, dos);

				// java.util.Date

				writeDate(this.tpep_dropoff_datetime, dos);

				// Float

				if (this.passenger_count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.passenger_count);
				}

				// Float

				if (this.trip_distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.trip_distance);
				}

				// Float

				if (this.RatecodeID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.RatecodeID);
				}

				// Character

				if (this.store_and_fwd_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.store_and_fwd_flag);
				}

				// Integer

				writeInteger(this.PULocationID, dos);

				// Integer

				writeInteger(this.DOLocationID, dos);

				// Integer

				writeInteger(this.payment_type, dos);

				// Float

				if (this.fare_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.fare_amount);
				}

				// Float

				if (this.extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extra);
				}

				// Float

				if (this.mta_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mta_tax);
				}

				// Float

				if (this.tip_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tip_amount);
				}

				// Float

				if (this.tolls_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tolls_amount);
				}

				// Float

				if (this.improvement_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.improvement_surcharge);
				}

				// Float

				if (this.total_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_amount);
				}

				// Float

				if (this.congestion_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.congestion_surcharge);
				}

				// Float

				if (this.Airport_fee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Airport_fee);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VendorID=" + String.valueOf(VendorID));
			sb.append(",tpep_pickup_datetime=" + String.valueOf(tpep_pickup_datetime));
			sb.append(",tpep_dropoff_datetime=" + String.valueOf(tpep_dropoff_datetime));
			sb.append(",passenger_count=" + String.valueOf(passenger_count));
			sb.append(",trip_distance=" + String.valueOf(trip_distance));
			sb.append(",RatecodeID=" + String.valueOf(RatecodeID));
			sb.append(",store_and_fwd_flag=" + String.valueOf(store_and_fwd_flag));
			sb.append(",PULocationID=" + String.valueOf(PULocationID));
			sb.append(",DOLocationID=" + String.valueOf(DOLocationID));
			sb.append(",payment_type=" + String.valueOf(payment_type));
			sb.append(",fare_amount=" + String.valueOf(fare_amount));
			sb.append(",extra=" + String.valueOf(extra));
			sb.append(",mta_tax=" + String.valueOf(mta_tax));
			sb.append(",tip_amount=" + String.valueOf(tip_amount));
			sb.append(",tolls_amount=" + String.valueOf(tolls_amount));
			sb.append(",improvement_surcharge=" + String.valueOf(improvement_surcharge));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append(",congestion_surcharge=" + String.valueOf(congestion_surcharge));
			sb.append(",Airport_fee=" + String.valueOf(Airport_fee));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		static byte[] commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];

		public Integer VendorID;

		public Integer getVendorID() {
			return this.VendorID;
		}

		public java.util.Date tpep_pickup_datetime;

		public java.util.Date getTpep_pickup_datetime() {
			return this.tpep_pickup_datetime;
		}

		public java.util.Date tpep_dropoff_datetime;

		public java.util.Date getTpep_dropoff_datetime() {
			return this.tpep_dropoff_datetime;
		}

		public Float passenger_count;

		public Float getPassenger_count() {
			return this.passenger_count;
		}

		public Float trip_distance;

		public Float getTrip_distance() {
			return this.trip_distance;
		}

		public Float RatecodeID;

		public Float getRatecodeID() {
			return this.RatecodeID;
		}

		public Character store_and_fwd_flag;

		public Character getStore_and_fwd_flag() {
			return this.store_and_fwd_flag;
		}

		public Integer PULocationID;

		public Integer getPULocationID() {
			return this.PULocationID;
		}

		public Integer DOLocationID;

		public Integer getDOLocationID() {
			return this.DOLocationID;
		}

		public Integer payment_type;

		public Integer getPayment_type() {
			return this.payment_type;
		}

		public Float fare_amount;

		public Float getFare_amount() {
			return this.fare_amount;
		}

		public Float extra;

		public Float getExtra() {
			return this.extra;
		}

		public Float mta_tax;

		public Float getMta_tax() {
			return this.mta_tax;
		}

		public Float tip_amount;

		public Float getTip_amount() {
			return this.tip_amount;
		}

		public Float tolls_amount;

		public Float getTolls_amount() {
			return this.tolls_amount;
		}

		public Float improvement_surcharge;

		public Float getImprovement_surcharge() {
			return this.improvement_surcharge;
		}

		public Float total_amount;

		public Float getTotal_amount() {
			return this.total_amount;
		}

		public Float congestion_surcharge;

		public Float getCongestion_surcharge() {
			return this.congestion_surcharge;
		}

		public Float Airport_fee;

		public Float getAirport_fee() {
			return this.Airport_fee;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL) {

				try {

					int length = 0;

					this.VendorID = readInteger(dis);

					this.tpep_pickup_datetime = readDate(dis);

					this.tpep_dropoff_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.passenger_count = null;
					} else {
						this.passenger_count = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.trip_distance = null;
					} else {
						this.trip_distance = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RatecodeID = null;
					} else {
						this.RatecodeID = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.store_and_fwd_flag = null;
					} else {
						this.store_and_fwd_flag = dis.readChar();
					}

					this.PULocationID = readInteger(dis);

					this.DOLocationID = readInteger(dis);

					this.payment_type = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.fare_amount = null;
					} else {
						this.fare_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extra = null;
					} else {
						this.extra = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mta_tax = null;
					} else {
						this.mta_tax = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tip_amount = null;
					} else {
						this.tip_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tolls_amount = null;
					} else {
						this.tolls_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.improvement_surcharge = null;
					} else {
						this.improvement_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_amount = null;
					} else {
						this.total_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.congestion_surcharge = null;
					} else {
						this.congestion_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Airport_fee = null;
					} else {
						this.Airport_fee = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.VendorID, dos);

				// java.util.Date

				writeDate(this.tpep_pickup_datetime, dos);

				// java.util.Date

				writeDate(this.tpep_dropoff_datetime, dos);

				// Float

				if (this.passenger_count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.passenger_count);
				}

				// Float

				if (this.trip_distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.trip_distance);
				}

				// Float

				if (this.RatecodeID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.RatecodeID);
				}

				// Character

				if (this.store_and_fwd_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.store_and_fwd_flag);
				}

				// Integer

				writeInteger(this.PULocationID, dos);

				// Integer

				writeInteger(this.DOLocationID, dos);

				// Integer

				writeInteger(this.payment_type, dos);

				// Float

				if (this.fare_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.fare_amount);
				}

				// Float

				if (this.extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extra);
				}

				// Float

				if (this.mta_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mta_tax);
				}

				// Float

				if (this.tip_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tip_amount);
				}

				// Float

				if (this.tolls_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tolls_amount);
				}

				// Float

				if (this.improvement_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.improvement_surcharge);
				}

				// Float

				if (this.total_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_amount);
				}

				// Float

				if (this.congestion_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.congestion_surcharge);
				}

				// Float

				if (this.Airport_fee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Airport_fee);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VendorID=" + String.valueOf(VendorID));
			sb.append(",tpep_pickup_datetime=" + String.valueOf(tpep_pickup_datetime));
			sb.append(",tpep_dropoff_datetime=" + String.valueOf(tpep_dropoff_datetime));
			sb.append(",passenger_count=" + String.valueOf(passenger_count));
			sb.append(",trip_distance=" + String.valueOf(trip_distance));
			sb.append(",RatecodeID=" + String.valueOf(RatecodeID));
			sb.append(",store_and_fwd_flag=" + String.valueOf(store_and_fwd_flag));
			sb.append(",PULocationID=" + String.valueOf(PULocationID));
			sb.append(",DOLocationID=" + String.valueOf(DOLocationID));
			sb.append(",payment_type=" + String.valueOf(payment_type));
			sb.append(",fare_amount=" + String.valueOf(fare_amount));
			sb.append(",extra=" + String.valueOf(extra));
			sb.append(",mta_tax=" + String.valueOf(mta_tax));
			sb.append(",tip_amount=" + String.valueOf(tip_amount));
			sb.append(",tolls_amount=" + String.valueOf(tolls_amount));
			sb.append(",improvement_surcharge=" + String.valueOf(improvement_surcharge));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append(",congestion_surcharge=" + String.valueOf(congestion_surcharge));
			sb.append(",Airport_fee=" + String.valueOf(Airport_fee));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		static byte[] commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];

		public Integer VendorID;

		public Integer getVendorID() {
			return this.VendorID;
		}

		public java.util.Date tpep_pickup_datetime;

		public java.util.Date getTpep_pickup_datetime() {
			return this.tpep_pickup_datetime;
		}

		public java.util.Date tpep_dropoff_datetime;

		public java.util.Date getTpep_dropoff_datetime() {
			return this.tpep_dropoff_datetime;
		}

		public Float passenger_count;

		public Float getPassenger_count() {
			return this.passenger_count;
		}

		public Float trip_distance;

		public Float getTrip_distance() {
			return this.trip_distance;
		}

		public Float RatecodeID;

		public Float getRatecodeID() {
			return this.RatecodeID;
		}

		public Character store_and_fwd_flag;

		public Character getStore_and_fwd_flag() {
			return this.store_and_fwd_flag;
		}

		public Integer PULocationID;

		public Integer getPULocationID() {
			return this.PULocationID;
		}

		public Integer DOLocationID;

		public Integer getDOLocationID() {
			return this.DOLocationID;
		}

		public Integer payment_type;

		public Integer getPayment_type() {
			return this.payment_type;
		}

		public Float fare_amount;

		public Float getFare_amount() {
			return this.fare_amount;
		}

		public Float extra;

		public Float getExtra() {
			return this.extra;
		}

		public Float mta_tax;

		public Float getMta_tax() {
			return this.mta_tax;
		}

		public Float tip_amount;

		public Float getTip_amount() {
			return this.tip_amount;
		}

		public Float tolls_amount;

		public Float getTolls_amount() {
			return this.tolls_amount;
		}

		public Float improvement_surcharge;

		public Float getImprovement_surcharge() {
			return this.improvement_surcharge;
		}

		public Float total_amount;

		public Float getTotal_amount() {
			return this.total_amount;
		}

		public Float congestion_surcharge;

		public Float getCongestion_surcharge() {
			return this.congestion_surcharge;
		}

		public Float Airport_fee;

		public Float getAirport_fee() {
			return this.Airport_fee;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL) {

				try {

					int length = 0;

					this.VendorID = readInteger(dis);

					this.tpep_pickup_datetime = readDate(dis);

					this.tpep_dropoff_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.passenger_count = null;
					} else {
						this.passenger_count = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.trip_distance = null;
					} else {
						this.trip_distance = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RatecodeID = null;
					} else {
						this.RatecodeID = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.store_and_fwd_flag = null;
					} else {
						this.store_and_fwd_flag = dis.readChar();
					}

					this.PULocationID = readInteger(dis);

					this.DOLocationID = readInteger(dis);

					this.payment_type = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.fare_amount = null;
					} else {
						this.fare_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extra = null;
					} else {
						this.extra = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mta_tax = null;
					} else {
						this.mta_tax = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tip_amount = null;
					} else {
						this.tip_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tolls_amount = null;
					} else {
						this.tolls_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.improvement_surcharge = null;
					} else {
						this.improvement_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_amount = null;
					} else {
						this.total_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.congestion_surcharge = null;
					} else {
						this.congestion_surcharge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Airport_fee = null;
					} else {
						this.Airport_fee = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.VendorID, dos);

				// java.util.Date

				writeDate(this.tpep_pickup_datetime, dos);

				// java.util.Date

				writeDate(this.tpep_dropoff_datetime, dos);

				// Float

				if (this.passenger_count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.passenger_count);
				}

				// Float

				if (this.trip_distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.trip_distance);
				}

				// Float

				if (this.RatecodeID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.RatecodeID);
				}

				// Character

				if (this.store_and_fwd_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.store_and_fwd_flag);
				}

				// Integer

				writeInteger(this.PULocationID, dos);

				// Integer

				writeInteger(this.DOLocationID, dos);

				// Integer

				writeInteger(this.payment_type, dos);

				// Float

				if (this.fare_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.fare_amount);
				}

				// Float

				if (this.extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extra);
				}

				// Float

				if (this.mta_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mta_tax);
				}

				// Float

				if (this.tip_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tip_amount);
				}

				// Float

				if (this.tolls_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tolls_amount);
				}

				// Float

				if (this.improvement_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.improvement_surcharge);
				}

				// Float

				if (this.total_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_amount);
				}

				// Float

				if (this.congestion_surcharge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.congestion_surcharge);
				}

				// Float

				if (this.Airport_fee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Airport_fee);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VendorID=" + String.valueOf(VendorID));
			sb.append(",tpep_pickup_datetime=" + String.valueOf(tpep_pickup_datetime));
			sb.append(",tpep_dropoff_datetime=" + String.valueOf(tpep_dropoff_datetime));
			sb.append(",passenger_count=" + String.valueOf(passenger_count));
			sb.append(",trip_distance=" + String.valueOf(trip_distance));
			sb.append(",RatecodeID=" + String.valueOf(RatecodeID));
			sb.append(",store_and_fwd_flag=" + String.valueOf(store_and_fwd_flag));
			sb.append(",PULocationID=" + String.valueOf(PULocationID));
			sb.append(",DOLocationID=" + String.valueOf(DOLocationID));
			sb.append(",payment_type=" + String.valueOf(payment_type));
			sb.append(",fare_amount=" + String.valueOf(fare_amount));
			sb.append(",extra=" + String.valueOf(extra));
			sb.append(",mta_tax=" + String.valueOf(mta_tax));
			sb.append(",tip_amount=" + String.valueOf(tip_amount));
			sb.append(",tolls_amount=" + String.valueOf(tolls_amount));
			sb.append(",improvement_surcharge=" + String.valueOf(improvement_surcharge));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append(",congestion_surcharge=" + String.valueOf(congestion_surcharge));
			sb.append(",Airport_fee=" + String.valueOf(Airport_fee));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("Clean_TLC_Data");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("Clean_TLC_Data");
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "TLC Clean Data"
						+ "?" + "postgres";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:SgJrf99IEi6uo3eg8ulRzg8e5YYXpEcBIo7F0bSvJWAo+PTI");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
							+ "\"(\"VendorID\" INT4 ,\"tpep_pickup_datetime\" TIMESTAMP(19)  ,\"tpep_dropoff_datetime\" TIMESTAMP(19)  ,\"passenger_count\" INT4 ,\"trip_distance\" FLOAT4 ,\"RateCodeType\" TEXT ,\"store_and_fwd_flag\" INT4 ,\"PULocatioID\" INT4 ,\"DOLocationID\" INT4 ,\"payment_type\" TEXT ,\"fare_amount\" FLOAT4 ,\"extra\" FLOAT4 ,\"mta_tax\" FLOAT4 ,\"tip_amount\" FLOAT4 ,\"tolls_amount\" FLOAT4 ,\"improvement_surcharge\" FLOAT4 ,\"total_amount\" FLOAT4 ,\"congestion_surcharge\" FLOAT4 ,\"Airport_fee\" FLOAT4 ,\"trip_duration_in_minutes\" INT4 ,\"average_speed_mph\" FLOAT4 ,\"PUZone\" VARCHAR ,\"PUBorough\" VARCHAR ,\"DOZone\" VARCHAR ,\"DOBorough\" VARCHAR ,primary key(\"VendorID\"))");
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(
						"SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"VendorID\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"VendorID\",\"tpep_pickup_datetime\",\"tpep_dropoff_datetime\",\"passenger_count\",\"trip_distance\",\"RateCodeType\",\"store_and_fwd_flag\",\"PULocatioID\",\"DOLocationID\",\"payment_type\",\"fare_amount\",\"extra\",\"mta_tax\",\"tip_amount\",\"tolls_amount\",\"improvement_surcharge\",\"total_amount\",\"congestion_surcharge\",\"Airport_fee\",\"trip_duration_in_minutes\",\"average_speed_mph\",\"PUZone\",\"PUBorough\",\"DOZone\",\"DOBorough\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"tpep_pickup_datetime\" = ?,\"tpep_dropoff_datetime\" = ?,\"passenger_count\" = ?,\"trip_distance\" = ?,\"RateCodeType\" = ?,\"store_and_fwd_flag\" = ?,\"PULocatioID\" = ?,\"DOLocationID\" = ?,\"payment_type\" = ?,\"fare_amount\" = ?,\"extra\" = ?,\"mta_tax\" = ?,\"tip_amount\" = ?,\"tolls_amount\" = ?,\"improvement_surcharge\" = ?,\"total_amount\" = ?,\"congestion_surcharge\" = ?,\"Airport_fee\" = ?,\"trip_duration_in_minutes\" = ?,\"average_speed_mph\" = ?,\"PUZone\" = ?,\"PUBorough\" = ?,\"DOZone\" = ?,\"DOBorough\" = ? WHERE \"VendorID\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "D:/Programing/Notebooks VS Code/TLC Data/yellow_tripdata_2024.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Programing/Notebooks VS Code/TLC Data/yellow_tripdata_2024.csv", "US-ASCII", ",",
								"\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.VendorID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"VendorID", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.VendorID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.tpep_pickup_datetime = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"tpep_pickup_datetime", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.tpep_pickup_datetime = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.tpep_dropoff_datetime = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"tpep_dropoff_datetime", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.tpep_dropoff_datetime = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.passenger_count = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"passenger_count", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.passenger_count = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.trip_distance = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"trip_distance", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.trip_distance = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.RatecodeID = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"RatecodeID", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.RatecodeID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.store_and_fwd_flag = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"store_and_fwd_flag", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.store_and_fwd_flag = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.PULocationID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"PULocationID", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.PULocationID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.DOLocationID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DOLocationID", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.DOLocationID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.payment_type = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"payment_type", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.payment_type = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.fare_amount = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"fare_amount", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.fare_amount = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.extra = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"extra", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.extra = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.mta_tax = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"mta_tax", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.mta_tax = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.tip_amount = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"tip_amount", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.tip_amount = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.tolls_amount = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"tolls_amount", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.tolls_amount = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.improvement_surcharge = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"improvement_surcharge", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.improvement_surcharge = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.total_amount = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"total_amount", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.total_amount = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.congestion_surcharge = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"congestion_surcharge", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.congestion_surcharge = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 18;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Airport_fee = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Airport_fee", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Airport_fee = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							row2 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches((row1.VendorID != null && row1.tpep_pickup_datetime != null
									&& row1.tpep_dropoff_datetime != null && row1.passenger_count != null
									&& row1.trip_distance != null && row1.trip_distance >= 0.1
									&& row1.RatecodeID != null && row1.store_and_fwd_flag != null
									&& row1.store_and_fwd_flag != ' ' && row1.PULocationID != null
									&& row1.DOLocationID != null && row1.payment_type != null
									&& row1.fare_amount != null && row1.extra != null && row1.mta_tax != null
									&& row1.tip_amount != null && row1.tolls_amount != null
									&& row1.improvement_surcharge != null && row1.total_amount != null
									&& row1.total_amount > 0 && row1.congestion_surcharge != null
									&& row1.Airport_fee != null
									&& (row1.tpep_dropoff_datetime.getTime() - row1.tpep_pickup_datetime.getTime())
											/ (60 * 1000) >= 1
									&& // Trip time >= 1 minute
									row1.trip_distance != 0 // Drop trips where trip_distance is exactly 0
							), "advanced condition failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row2 == null) {
									row2 = new row2Struct();
								}
								row2.VendorID = row1.VendorID;
								row2.tpep_pickup_datetime = row1.tpep_pickup_datetime;
								row2.tpep_dropoff_datetime = row1.tpep_dropoff_datetime;
								row2.passenger_count = row1.passenger_count;
								row2.trip_distance = row1.trip_distance;
								row2.RatecodeID = row1.RatecodeID;
								row2.store_and_fwd_flag = row1.store_and_fwd_flag;
								row2.PULocationID = row1.PULocationID;
								row2.DOLocationID = row1.DOLocationID;
								row2.payment_type = row1.payment_type;
								row2.fare_amount = row1.fare_amount;
								row2.extra = row1.extra;
								row2.mta_tax = row1.mta_tax;
								row2.tip_amount = row1.tip_amount;
								row2.tolls_amount = row1.tolls_amount;
								row2.improvement_surcharge = row1.improvement_surcharge;
								row2.total_amount = row1.total_amount;
								row2.congestion_surcharge = row1.congestion_surcharge;
								row2.Airport_fee = row1.Airport_fee;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row3"
								///////////////////////////////////////////////

								boolean forceLooprow3 = false;

								row3Struct row3ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row3HashKey.LocationID = row2.PULocationID;

									row3HashKey.hashCodeDirty = true;

									tHash_Lookup_row3.lookup(row3HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
									// and it contains more one result from keys : row3.LocationID = '" +
									// row3HashKey.LocationID + "'");
								} // G 071

								row3Struct row3 = null;

								row3Struct fromLookup_row3 = null;
								row3 = row3Default;

								if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

									fromLookup_row3 = tHash_Lookup_row3.next();

								} // G 099

								if (fromLookup_row3 != null) {
									row3 = fromLookup_row3;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "row4"
								///////////////////////////////////////////////

								boolean forceLooprow4 = false;

								row4Struct row4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row4HashKey.LocationID = row2.DOLocationID;

									row4HashKey.hashCodeDirty = true;

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
									// and it contains more one result from keys : row4.LocationID = '" +
									// row4HashKey.LocationID + "'");
								} // G 071

								row4Struct row4 = null;

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

									fromLookup_row4 = tHash_Lookup_row4.next();

								} // G 099

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

// # Output table : 'out1'
									out1_tmp.VendorID = row2.VendorID;
									out1_tmp.tpep_pickup_datetime = row2.tpep_pickup_datetime;
									out1_tmp.tpep_dropoff_datetime = row2.tpep_dropoff_datetime;
									out1_tmp.passenger_count = (int) Math.round(row2.passenger_count);
									out1_tmp.trip_distance = row2.trip_distance;
									out1_tmp.RateCodeType = (int) Math.round(row2.RatecodeID) == 1 ? "Standard rate"
											: (int) Math.round(row2.RatecodeID) == 2 ? "JFK"
													: (int) Math.round(row2.RatecodeID) == 3 ? "Newark"
															: (int) Math.round(row2.RatecodeID) == 4
																	? "Nassau or Westchester"
																	: (int) Math.round(row2.RatecodeID) == 5
																			? "Negotiated fare"
																			: (int) Math.round(row2.RatecodeID) == 6
																					? "Group ride"
																					: "Other";
									;
									out1_tmp.store_and_fwd_flag = (row2.store_and_fwd_flag != null
											&& String.valueOf(row2.store_and_fwd_flag).trim().equals("Y")) ? 1 : 0;
									out1_tmp.PULocatioID = row2.PULocationID;
									out1_tmp.DOLocationID = row2.DOLocationID;
									out1_tmp.payment_type = String.valueOf(row2.payment_type).equals("1")
											? "Credit card"
											: String.valueOf(row2.payment_type).equals("2") ? "Cash"
													: String.valueOf(row2.payment_type).equals("3") ? "No charge"
															: String.valueOf(row2.payment_type).equals("4") ? "Dispute"
																	: String.valueOf(row2.payment_type)
																			.equals("5")
																					? "Unknown"
																					: String.valueOf(row2.payment_type)
																							.equals("6") ? "Voided trip"
																									: "Other";
									out1_tmp.fare_amount = row2.fare_amount;
									out1_tmp.extra = row2.extra;
									out1_tmp.mta_tax = row2.mta_tax;
									out1_tmp.tip_amount = row2.tip_amount;
									out1_tmp.tolls_amount = row2.tolls_amount;
									out1_tmp.improvement_surcharge = row2.improvement_surcharge;
									out1_tmp.total_amount = row2.total_amount;
									out1_tmp.congestion_surcharge = row2.congestion_surcharge;
									out1_tmp.Airport_fee = row2.Airport_fee;
									out1_tmp.trip_duration_in_minutes = (int) TalendDate
											.diffDate(row1.tpep_dropoff_datetime, row2.tpep_pickup_datetime, "mm");
									out1_tmp.average_speed_mph = Float.valueOf((float) (row2.trip_distance
											/ (TalendDate.diffDate(row1.tpep_dropoff_datetime,
													row1.tpep_pickup_datetime, "mm") / 60.0)));
									out1_tmp.PUZone = row3.Zone;
									out1_tmp.PUBorough = row3.Borough;
									out1_tmp.DOZone = row4.Zone;
									out1_tmp.DOBorough = row4.Borough;
									out1 = out1_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
									}

									whetherReject_tDBOutput_1 = false;
									if (out1.VendorID == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(1, out1.VendorID);
									}

									int checkCount_tDBOutput_1 = -1;
									try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
										while (rs_tDBOutput_1.next()) {
											checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
										}
									}
									if (checkCount_tDBOutput_1 > 0) {
										if (out1.tpep_pickup_datetime != null) {
											pstmtUpdate_tDBOutput_1.setTimestamp(1,
													new java.sql.Timestamp(out1.tpep_pickup_datetime.getTime()));
										} else {
											pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.TIMESTAMP);
										}

										if (out1.tpep_dropoff_datetime != null) {
											pstmtUpdate_tDBOutput_1.setTimestamp(2,
													new java.sql.Timestamp(out1.tpep_dropoff_datetime.getTime()));
										} else {
											pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
										}

										if (out1.passenger_count == null) {
											pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(3, out1.passenger_count);
										}

										if (out1.trip_distance == null) {
											pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(4, out1.trip_distance);
										}

										if (out1.RateCodeType == null) {
											pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(5, out1.RateCodeType);
										}

										if (out1.store_and_fwd_flag == null) {
											pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(6, out1.store_and_fwd_flag);
										}

										if (out1.PULocatioID == null) {
											pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(7, out1.PULocatioID);
										}

										if (out1.DOLocationID == null) {
											pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(8, out1.DOLocationID);
										}

										if (out1.payment_type == null) {
											pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(9, out1.payment_type);
										}

										if (out1.fare_amount == null) {
											pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(10, out1.fare_amount);
										}

										if (out1.extra == null) {
											pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(11, out1.extra);
										}

										if (out1.mta_tax == null) {
											pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(12, out1.mta_tax);
										}

										if (out1.tip_amount == null) {
											pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(13, out1.tip_amount);
										}

										if (out1.tolls_amount == null) {
											pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(14, out1.tolls_amount);
										}

										if (out1.improvement_surcharge == null) {
											pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(15, out1.improvement_surcharge);
										}

										if (out1.total_amount == null) {
											pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(16, out1.total_amount);
										}

										if (out1.congestion_surcharge == null) {
											pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(17, out1.congestion_surcharge);
										}

										if (out1.Airport_fee == null) {
											pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(18, out1.Airport_fee);
										}

										if (out1.trip_duration_in_minutes == null) {
											pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(19, out1.trip_duration_in_minutes);
										}

										if (out1.average_speed_mph == null) {
											pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.FLOAT);
										} else {
											pstmtUpdate_tDBOutput_1.setFloat(20, out1.average_speed_mph);
										}

										if (out1.PUZone == null) {
											pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(21, out1.PUZone);
										}

										if (out1.PUBorough == null) {
											pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(22, out1.PUBorough);
										}

										if (out1.DOZone == null) {
											pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(23, out1.DOZone);
										}

										if (out1.DOBorough == null) {
											pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(24, out1.DOBorough);
										}

										if (out1.VendorID == null) {
											pstmtUpdate_tDBOutput_1.setNull(25 + count_tDBOutput_1,
													java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(25 + count_tDBOutput_1, out1.VendorID);
										}

										try {

											updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
													+ pstmtUpdate_tDBOutput_1.executeUpdate();
											nb_line_tDBOutput_1++;

										} catch (java.lang.Exception e) {

											whetherReject_tDBOutput_1 = true;
											nb_line_tDBOutput_1++;
											System.err.print(e.getMessage());
										}
									} else {
										if (out1.VendorID == null) {
											pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(1, out1.VendorID);
										}

										if (out1.tpep_pickup_datetime != null) {
											pstmtInsert_tDBOutput_1.setTimestamp(2,
													new java.sql.Timestamp(out1.tpep_pickup_datetime.getTime()));
										} else {
											pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
										}

										if (out1.tpep_dropoff_datetime != null) {
											pstmtInsert_tDBOutput_1.setTimestamp(3,
													new java.sql.Timestamp(out1.tpep_dropoff_datetime.getTime()));
										} else {
											pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
										}

										if (out1.passenger_count == null) {
											pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(4, out1.passenger_count);
										}

										if (out1.trip_distance == null) {
											pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(5, out1.trip_distance);
										}

										if (out1.RateCodeType == null) {
											pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(6, out1.RateCodeType);
										}

										if (out1.store_and_fwd_flag == null) {
											pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(7, out1.store_and_fwd_flag);
										}

										if (out1.PULocatioID == null) {
											pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(8, out1.PULocatioID);
										}

										if (out1.DOLocationID == null) {
											pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(9, out1.DOLocationID);
										}

										if (out1.payment_type == null) {
											pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(10, out1.payment_type);
										}

										if (out1.fare_amount == null) {
											pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(11, out1.fare_amount);
										}

										if (out1.extra == null) {
											pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(12, out1.extra);
										}

										if (out1.mta_tax == null) {
											pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(13, out1.mta_tax);
										}

										if (out1.tip_amount == null) {
											pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(14, out1.tip_amount);
										}

										if (out1.tolls_amount == null) {
											pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(15, out1.tolls_amount);
										}

										if (out1.improvement_surcharge == null) {
											pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(16, out1.improvement_surcharge);
										}

										if (out1.total_amount == null) {
											pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(17, out1.total_amount);
										}

										if (out1.congestion_surcharge == null) {
											pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(18, out1.congestion_surcharge);
										}

										if (out1.Airport_fee == null) {
											pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(19, out1.Airport_fee);
										}

										if (out1.trip_duration_in_minutes == null) {
											pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(20, out1.trip_duration_in_minutes);
										}

										if (out1.average_speed_mph == null) {
											pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.FLOAT);
										} else {
											pstmtInsert_tDBOutput_1.setFloat(21, out1.average_speed_mph);
										}

										if (out1.PUZone == null) {
											pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(22, out1.PUZone);
										}

										if (out1.PUBorough == null) {
											pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(23, out1.PUBorough);
										}

										if (out1.DOZone == null) {
											pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(24, out1.DOZone);
										}

										if (out1.DOBorough == null) {
											pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(25, out1.DOBorough);
										}

										try {

											insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
													+ pstmtInsert_tDBOutput_1.executeUpdate();
											nb_line_tDBOutput_1++;

										} catch (java.lang.Exception e) {

											whetherReject_tDBOutput_1 = true;
											nb_line_tDBOutput_1++;
											System.err.print(e.getMessage());
										}
									}
									commitCounter_tDBOutput_1++;
									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
										conn_tDBOutput_1.commit();

										commitCounter_tDBOutput_1 = 0;
									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "out1"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("D:/Programing/Notebooks VS Code/TLC Data/yellow_tripdata_2024.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		static byte[] commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer LocationID;

		public Integer getLocationID() {
			return this.LocationID;
		}

		public String Borough;

		public String getBorough() {
			return this.Borough;
		}

		public String Zone;

		public String getZone() {
			return this.Zone;
		}

		public String service_zone;

		public String getService_zone() {
			return this.service_zone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.LocationID == null) ? 0 : this.LocationID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.LocationID == null) {
				if (other.LocationID != null)
					return false;

			} else if (!this.LocationID.equals(other.LocationID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.LocationID = this.LocationID;
			other.Borough = this.Borough;
			other.Zone = this.Zone;
			other.service_zone = this.service_zone;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.LocationID = this.LocationID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL) {

				try {

					int length = 0;

					this.LocationID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.LocationID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Borough = readString(dis, ois);

				this.Zone = readString(dis, ois);

				this.service_zone = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Borough, dos, oos);

				writeString(this.Zone, dos, oos);

				writeString(this.service_zone, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LocationID=" + String.valueOf(LocationID));
			sb.append(",Borough=" + Borough);
			sb.append(",Zone=" + Zone);
			sb.append(",service_zone=" + service_zone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LocationID, other.LocationID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3)
				// outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						"D:/Programing/Notebooks VS Code/TLC Data/taxi_zone_lookup.csv"/**
																						 * End field
																						 * tFileInputDelimited_2:FILENAME
																						 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),
											"US-ASCII")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_2.readNext()) {

								totalLinetFileInputDelimited_2++;

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row3 = null;

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row3.LocationID = null;

								row3.Borough = null;

								row3.Zone = null;

								row3.service_zone = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row3.LocationID = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"LocationID", "row3",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row3.LocationID = null;

									}

								} else {

									row3.LocationID = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Borough = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Borough = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Zone = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Zone = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.service_zone = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.service_zone = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tAdvancedHash_row3 main ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							row3Struct row3_HashRow = new row3Struct();

							row3_HashRow.LocationID = row3.LocationID;

							row3_HashRow.Borough = row3.Borough;

							row3_HashRow.Zone = row3.Zone;

							row3_HashRow.service_zone = row3.service_zone;

							tHash_Lookup_row3.put(row3_HashRow);

							tos_count_tAdvancedHash_row3++;

							/**
							 * [tAdvancedHash_row3 main ] stop
							 */

							/**
							 * [tAdvancedHash_row3 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							/**
							 * [tAdvancedHash_row3 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row3 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							/**
							 * [tAdvancedHash_row3 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		static byte[] commonByteArray_TLC_TRIP_RECORD_DATA_TASK_ETL = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer LocationID;

		public Integer getLocationID() {
			return this.LocationID;
		}

		public String Borough;

		public String getBorough() {
			return this.Borough;
		}

		public String Zone;

		public String getZone() {
			return this.Zone;
		}

		public String service_zone;

		public String getService_zone() {
			return this.service_zone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.LocationID == null) ? 0 : this.LocationID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.LocationID == null) {
				if (other.LocationID != null)
					return false;

			} else if (!this.LocationID.equals(other.LocationID))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.LocationID = this.LocationID;
			other.Borough = this.Borough;
			other.Zone = this.Zone;
			other.service_zone = this.service_zone;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.LocationID = this.LocationID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TLC_TRIP_RECORD_DATA_TASK_ETL) {

				try {

					int length = 0;

					this.LocationID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.LocationID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Borough = readString(dis, ois);

				this.Zone = readString(dis, ois);

				this.service_zone = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Borough, dos, oos);

				writeString(this.Zone, dos, oos);

				writeString(this.service_zone, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LocationID=" + String.valueOf(LocationID));
			sb.append(",Borough=" + Borough);
			sb.append(",Zone=" + Zone);
			sb.append(",service_zone=" + service_zone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LocationID, other.LocationID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4)
				// outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */
						"D:/Programing/Notebooks VS Code/TLC Data/taxi_zone_lookup.csv"/**
																						 * End field
																						 * tFileInputDelimited_3:FILENAME
																						 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),
											"US-ASCII")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
											: totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3
										? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row4.LocationID = null;

								row4.Borough = null;

								row4.Zone = null;

								row4.service_zone = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row4.LocationID = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"LocationID", "row4",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row4.LocationID = null;

									}

								} else {

									row4.LocationID = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.Borough = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row4.Borough = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.Zone = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row4.Zone = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.service_zone = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row4.service_zone = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.LocationID = row4.LocationID;

							row4_HashRow.Borough = row4.Borough;

							row4_HashRow.Zone = row4.Zone;

							row4_HashRow.service_zone = row4.service_zone;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ETL ETLClass = new ETL();

		int exitCode = ETLClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ETL.class.getClassLoader()
					.getResourceAsStream("tlc_trip_record_data_task/etl_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ETL.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 186063 characters generated by Talend Open Studio for Data Integration on the
 * March 12, 2025 at 9:58:02 PM EET
 ************************************************************************************************/